{
  "swagger": "2.0",
  "info": {
    "version": "Swagger Server",
    "title": ""
  },
  "tags": [
    {
      "name": "jobs"
    },
    {
      "name": "workflows"
    },
    {
      "name": "namespaces"
    },
    {
      "name": "workflow triggers"
    },
    {
      "name": "workflow statistics"
    },
    {
      "name": "tasks"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/jobs": {
      "get": {
        "tags": [
          "jobs"
        ],
        "summary": "Get all running or executed jobs",
        "description": "query param 'from' and 'to' takes precedence over 'date_range'. If 'from' is specified without 'to' it means get all jobs from 'from' timestamp till now.If 'to' is specified without 'from' it means get all jobs from beginning till 'from' timestamp",
        "operationId": "getAllJobs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "job status",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CREATED",
                "RUNNING",
                "SUCCESSFUL",
                "FAILED"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start time of the range",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "to",
            "in": "query",
            "description": "End time of the range",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "date_range",
            "in": "query",
            "description": "Number of days to fetch jobs from today",
            "required": false,
            "type": "integer",
            "default": "10",
            "format": "int32"
          },
          {
            "name": "namespace",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Job"
              }
            }
          }
        }
      }
    },
    "/namespaces": {
      "get": {
        "tags": [
          "namespaces"
        ],
        "summary": "Get all namespaces",
        "description": "",
        "operationId": "getAllNamespaces",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Namespace"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "namespaces"
        ],
        "summary": "Add new namespace",
        "description": "",
        "operationId": "addNamespace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Namespace"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Namespace"
            }
          },
          "409": {
            "description": "Namespace already exists"
          }
        }
      }
    },
    "/namespaces/{name}": {
      "get": {
        "tags": [
          "namespaces"
        ],
        "summary": "Get namespace by name",
        "description": "",
        "operationId": "getNamespace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "namespace name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Namespace"
            }
          },
          "404": {
            "description": "Namespace not found"
          }
        }
      },
      "put": {
        "tags": [
          "namespaces"
        ],
        "summary": "Update namespace",
        "description": "",
        "operationId": "updateNamespace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "namespace name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Namespace"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Namespace"
            }
          },
          "404": {
            "description": "Namespace not found"
          }
        }
      },
      "delete": {
        "tags": [
          "namespaces"
        ],
        "summary": "Delete namespace (not implemented)",
        "description": "",
        "operationId": "deleteNamespace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "namespace name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "501": {
            "description": "not implemented"
          }
        }
      }
    },
    "/statistics/workflows": {
      "get": {
        "tags": [
          "workflow statistics"
        ],
        "summary": "Get statistics across workflows",
        "description": "query param 'from' and 'to' takes precedence over 'date_range'. If 'from' is specified without 'to' it means get all jobs from 'from' timestamp till now.If 'to' is specified without 'from' it means get all jobs from beginning till 'from' timestamp",
        "operationId": "getAllWorkflowStatistics",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Start time of the range",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "to",
            "in": "query",
            "description": "End time of the range",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "date_range",
            "in": "query",
            "description": "Number of days to fetch jobs from today",
            "required": false,
            "type": "integer",
            "default": "10",
            "format": "int32"
          },
          {
            "name": "namespace",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WorkflowStatistics"
            }
          }
        }
      }
    },
    "/statistics/workflows/{name}": {
      "get": {
        "tags": [
          "workflow statistics"
        ],
        "summary": "Get statistics for workflow by name",
        "description": "query param 'from' and 'to' takes precedence over 'date_range'. If 'from' is specified without 'to' it means get all jobs from 'from' timestamp till now.If 'to' is specified without 'from' it means get all jobs from beginning till 'from' timestamp",
        "operationId": "getWorkflowStatistics",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "workflow name",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start time of the range",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "to",
            "in": "query",
            "description": "End time of the range",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "date_range",
            "in": "query",
            "description": "Number of days to fetch jobs from today",
            "required": false,
            "type": "integer",
            "default": "10",
            "format": "int32"
          },
          {
            "name": "namespace",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WorkflowStatistics"
            }
          },
          "404": {
            "description": "Workflow not found"
          }
        }
      }
    },
    "/workflows": {
      "get": {
        "tags": [
          "workflows"
        ],
        "summary": "Get all workflows",
        "description": "",
        "operationId": "getAllWorkflows",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Workflow"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "workflows"
        ],
        "summary": "Add new workflow",
        "description": "",
        "operationId": "addWorkflow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "namespace",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          },
          "409": {
            "description": "Workflow already exists"
          }
        }
      }
    },
    "/workflows/{name}": {
      "get": {
        "tags": [
          "workflows"
        ],
        "summary": "Get workflow by name",
        "description": "",
        "operationId": "getWorkflow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "workflow name",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          },
          "404": {
            "description": "Workflow not found"
          }
        }
      },
      "put": {
        "tags": [
          "workflows"
        ],
        "summary": "Update workflow by name",
        "description": "",
        "operationId": "updateWorkflow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "workflow name",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          },
          "404": {
            "description": "Workflow not found"
          }
        }
      },
      "delete": {
        "tags": [
          "workflows"
        ],
        "summary": "Delete workflow by name",
        "description": "",
        "operationId": "deleteWorkflow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "workflow name",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "Workflow not found"
          }
        }
      }
    },
    "/workflows/{workflow}/jobs": {
      "get": {
        "tags": [
          "jobs"
        ],
        "summary": "Get all running or executed jobs for a workflow",
        "description": "query param 'from' and 'to' takes precedence over 'date_range'. If 'from' is specified without 'to' it means get all jobs from 'from' timestamp till now.If 'to' is specified without 'from' it means get all jobs from beginning till 'from' timestamp",
        "operationId": "getAllJobs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "description": "workflow name",
            "required": true,
            "type": "string"
          },
          {
            "name": "trigger",
            "in": "query",
            "description": "workflow trigger name",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "job status",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CREATED",
                "RUNNING",
                "SUCCESSFUL",
                "FAILED"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start time of the range",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "to",
            "in": "query",
            "description": "End time of the range",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "date_range",
            "in": "query",
            "description": "Number of days to fetch jobs from today",
            "required": false,
            "type": "integer",
            "default": "10",
            "format": "int32"
          },
          {
            "name": "namespace",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Job"
              }
            }
          }
        }
      }
    },
    "/workflows/{workflow}/jobs/{id}": {
      "get": {
        "tags": [
          "jobs"
        ],
        "summary": "Get job by id for a workflow",
        "description": "",
        "operationId": "getJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "description": "workflow name",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "job id",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JobResponse"
            }
          },
          "404": {
            "description": "Job not found"
          }
        }
      },
      "post": {
        "tags": [
          "jobs"
        ],
        "summary": "Execute an action on a job. Supported actions - abort",
        "description": "",
        "operationId": "performAction",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "description": "workflow name",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "job id",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "action",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "operation success"
          },
          "400": {
            "description": "invalid action"
          }
        }
      }
    },
    "/workflows/{workflow}/triggers": {
      "get": {
        "tags": [
          "workflow triggers"
        ],
        "summary": "Get all workflow triggers",
        "description": "",
        "operationId": "getAllWorkflowTriggers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "enable",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "namespace",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WorkflowTrigger"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "workflow triggers"
        ],
        "summary": "Create workflow trigger",
        "description": "",
        "operationId": "createWorkflowTrigger",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "description": "workflow name",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/WorkflowTrigger"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WorkflowTrigger"
            }
          },
          "404": {
            "description": "Workflow trigger not found"
          }
        }
      },
      "put": {
        "tags": [
          "workflow triggers"
        ],
        "summary": "Enable/ Disable all triggers for workflow by name",
        "description": "",
        "operationId": "updateWorkflow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "description": "workflow name",
            "required": true,
            "type": "string"
          },
          {
            "name": "enable",
            "in": "query",
            "description": "enable/ disable all workflow triggers",
            "required": true,
            "type": "boolean",
            "default": "true"
          },
          {
            "name": "namespace",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "list of affected triggers"
          },
          "404": {
            "description": "Workflow not found"
          }
        }
      }
    },
    "/workflows/{workflow}/jobs/{job}/tasks/{task}": {
      "post": {
        "tags": [
          "tasks"
        ],
        "summary": "Execute an action on a task. Supported actions - abort",
        "description": "",
        "operationId": "performAction",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "description": "workflowname",
            "required": true,
            "type": "string"
          },
          {
            "name": "job",
            "in": "path",
            "description": "job id",
            "required": true,
            "type": "string"
          },
          {
            "name": "task",
            "in": "path",
            "description": "task name",
            "type": "string",
            "required": true
          },
          {
            "name": "action",
            "in": "query",
            "description": "defines what type of action to be performed on the task",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "invalid action"
          }
        }
      }
    },
    "/workflows/{workflow}/triggers/{name}": {
      "get": {
        "tags": [
          "workflow triggers"
        ],
        "summary": "Get workflow trigger by name",
        "description": "",
        "operationId": "getWorkflowTrigger",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "description": "workflow name",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "description": "workflow trigger name",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WorkflowTrigger"
            }
          },
          "404": {
            "description": "Workflow trigger not found"
          }
        }
      },
      "put": {
        "tags": [
          "workflow triggers"
        ],
        "summary": "Enable/Disable workflow trigger",
        "description": "",
        "operationId": "updateWorkflowTrigger",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "description": "workflow name",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "description": "workflow trigger name",
            "required": true,
            "type": "string"
          },
          {
            "name": "enable",
            "in": "query",
            "description": "enable/ disable the workflow trigger",
            "required": true,
            "type": "boolean",
            "default": "true"
          },
          {
            "name": "namespace",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Affected workflow trigger. If empty it means workflow trigger was already in resultant state"
          },
          "404": {
            "description": "Workflow trigger not found"
          }
        }
      },
      "delete": {
        "tags": [
          "workflow triggers"
        ],
        "summary": "Delete workflow trigger by name",
        "description": "",
        "operationId": "deleteWorkflowTrigger",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "workflow",
            "in": "path",
            "description": "workflow name",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "description": "workflow trigger name",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "Workflow trigger not found"
          }
        }
      }
    }
  },
  "definitions": {
    "DailyTimeIntervalSchedule": {
      "allOf": [
        {
          "$ref": "#/definitions/Schedule"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "cron",
                "simple",
                "fixed",
                "daily_time",
                "calendar"
              ]
            },
            "misfireInstruction": {
              "type": "integer",
              "format": "int32"
            },
            "repeatInterval": {
              "type": "integer",
              "format": "int32"
            },
            "repeatIntervalUnit": {
              "type": "string",
              "enum": [
                "MILLISECOND",
                "SECOND",
                "MINUTE",
                "HOUR",
                "DAY",
                "WEEK",
                "MONTH",
                "YEAR"
              ]
            },
            "repeatCount": {
              "type": "integer",
              "format": "int32"
            },
            "startTimeOfDay": {
              "$ref": "#/definitions/TimeOfDay"
            },
            "endTimeOfDay": {
              "$ref": "#/definitions/TimeOfDay"
            },
            "timezone": {
              "type": "string"
            },
            "daysOfWeek": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        }
      ]
    },
    "TimeOfDay": {
      "type": "object",
      "properties": {
        "hour": {
          "type": "integer",
          "format": "int32"
        },
        "minute": {
          "type": "integer",
          "format": "int32"
        },
        "second": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Task": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "job": {
          "type": "string"
        },
        "workflow": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "maxExecutionTimeInMs": {
          "type": "integer",
          "format": "int64"
        },
        "dependsOn": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "context": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "CREATED",
            "WAITING",
            "SCHEDULED",
            "SUBMITTED",
            "RUNNING",
            "SUCCESSFUL",
            "SKIPPED",
            "FAILED"
          ]
        },
        "statusMessage": {
          "type": "string"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "submittedAt": {
          "type": "integer",
          "format": "int64"
        },
        "completedAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "JobResponse": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "workflow": {
          "type": "string"
        },
        "trigger": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "CREATED",
            "RUNNING",
            "SUCCESSFUL",
            "FAILED"
          ]
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "completedAt": {
          "type": "integer",
          "format": "int64"
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Task"
          }
        }
      }
    },
    "Workflow": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkflowTask"
          }
        },
        "emailOnFailure": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "emailOnSuccess": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "WorkflowTask": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "dependsOn": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "maxExecutionTimeInMs": {
          "type": "integer",
          "format": "int64"
        },
        "enabled": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "WorkflowTrigger": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "workflow": {
          "type": "string"
        },
        "startAt": {
          "type": "integer",
          "format": "int64"
        },
        "schedule": {
          "$ref": "#/definitions/Schedule"
        },
        "endAt": {
          "type": "integer",
          "format": "int64"
        },
        "enabled": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "WorkflowStatistics": {
      "type": "object",
      "properties": {
        "jobs": {
          "$ref": "#/definitions/ExecutionCounters"
        },
        "tasks": {
          "$ref": "#/definitions/ExecutionCounters"
        },
        "from": {
          "type": "integer",
          "format": "int64"
        },
        "to": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Namespace": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "CronSchedule": {
      "allOf": [
        {
          "$ref": "#/definitions/Schedule"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "cron",
                "simple",
                "fixed",
                "daily_time",
                "calendar"
              ]
            },
            "misfireInstruction": {
              "type": "integer",
              "format": "int32"
            },
            "cronExpression": {
              "type": "string"
            },
            "timezone": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ExecutionCounters": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "active": {
          "type": "integer",
          "format": "int32"
        },
        "successful": {
          "type": "integer",
          "format": "int32"
        },
        "failed": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "FixedDelaySchedule": {
      "allOf": [
        {
          "$ref": "#/definitions/Schedule"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "cron",
                "simple",
                "fixed",
                "daily_time",
                "calendar"
              ]
            },
            "misfireInstruction": {
              "type": "integer",
              "format": "int32"
            },
            "interval": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ]
    },
    "Schedule": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "cron",
            "simple",
            "fixed",
            "daily_time",
            "calendar"
          ]
        },
        "misfireInstruction": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Job": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "workflow": {
          "type": "string"
        },
        "trigger": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "CREATED",
            "RUNNING",
            "SUCCESSFUL",
            "FAILED"
          ]
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "completedAt": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "SimpleSchedule": {
      "allOf": [
        {
          "$ref": "#/definitions/Schedule"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "cron",
                "simple",
                "fixed",
                "daily_time",
                "calendar"
              ]
            },
            "misfireInstruction": {
              "type": "integer",
              "format": "int32"
            },
            "repeatForever": {
              "type": "boolean",
              "default": false
            },
            "repeatIntervalInMs": {
              "type": "integer",
              "format": "int64"
            },
            "repeatCount": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      ]
    },
    "CalendarIntervalSchedule": {
      "allOf": [
        {
          "$ref": "#/definitions/Schedule"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "cron",
                "simple",
                "fixed",
                "daily_time",
                "calendar"
              ]
            },
            "misfireInstruction": {
              "type": "integer",
              "format": "int32"
            },
            "repeatInterval": {
              "type": "integer",
              "format": "int32"
            },
            "repeatIntervalUnit": {
              "type": "string",
              "enum": [
                "MILLISECOND",
                "SECOND",
                "MINUTE",
                "HOUR",
                "DAY",
                "WEEK",
                "MONTH",
                "YEAR"
              ]
            },
            "timezone": {
              "type": "string"
            },
            "preserveHourOfDayAcrossDaylightSavings": {
              "type": "boolean",
              "default": false
            },
            "skipDayIfHourDoesNotExist": {
              "type": "boolean",
              "default": false
            }
          }
        }
      ]
    }
  }
}